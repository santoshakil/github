import 'package:flutter/material.dart';
import 'package:github/src/extensions/context.dart';
import 'package:go_router/go_router.dart';

import '../../repos/model/repository_model.dart';

class RepositoryDetailsView extends StatelessWidget {
  static const route = '/details';

  const RepositoryDetailsView({super.key});

  @override
  Widget build(BuildContext context) {
    final data = GoRouterState.of(context).extra as Repository?;
    return Scaffold(
      appBar: AppBar(title: Text(data?.name ?? ''), centerTitle: false),
      body: ListView(
        padding: const EdgeInsets.all(8.0),
        children: [
          Text(data?.fullName ?? '', style: context.text.titleLarge),
          const Divider(),
          Text(data?.description ?? '', style: context.text.labelMedium),
          const Divider(),
          Text('Language: ${data?.language ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Stars: ${data?.stargazersCount ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Forks: ${data?.forksCount ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Watchers: ${data?.watchersCount ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Open Issues: ${data?.openIssuesCount ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Default Branch: ${data?.defaultBranch ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Created At: ${data?.createdAt ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Updated At: ${data?.updatedAt ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Pushed At: ${data?.pushedAt ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Size: ${data?.size ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Forks: ${data?.forks ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Open Issues: ${data?.openIssues ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Watchers: ${data?.watchers ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Default Branch: ${data?.defaultBranch ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Score: ${data?.score ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Archived: ${data?.archived ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Disabled: ${data?.disabled ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Fork: ${data?.fork ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Forks: ${data?.forks ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Forks Count: ${data?.forksCount ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Forks Url: ${data?.forksUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Git Url: ${data?.gitUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Html Url: ${data?.htmlUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Id: ${data?.id ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Issue Comment Url: ${data?.issueCommentUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Issue Events Url: ${data?.issueEventsUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Issues Url: ${data?.issuesUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Keys Url: ${data?.keysUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Labels Url: ${data?.labelsUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Languages Url: ${data?.languagesUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Merges Url: ${data?.mergesUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Milestones Url: ${data?.milestonesUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Mirror Url: ${data?.mirrorUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Name: ${data?.name ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Node Id: ${data?.nodeId ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Notifications Url: ${data?.notificationsUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Private: ${data?.private ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Pulls Url: ${data?.pullsUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Releases Url: ${data?.releasesUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Ssh Url: ${data?.sshUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Stargazers Url: ${data?.stargazersUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Statuses Url: ${data?.statusesUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Subscribers Url: ${data?.subscribersUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Subscription Url: ${data?.subscriptionUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Svn Url: ${data?.svnUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Tags Url: ${data?.tagsUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Teams Url: ${data?.teamsUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Trees Url: ${data?.treesUrl ?? ''}', style: context.text.labelMedium),
          const Divider(),
          Text('Url: ${data?.url ?? ''}', style: context.text.labelMedium),
          const Divider(),
        ],
      ),
    );
  }
}
